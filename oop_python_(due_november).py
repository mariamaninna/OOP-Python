# -*- coding: utf-8 -*-
"""OOP Python (due November).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rZYF7vdwTU1FsxmNIKHJj3ad5RA1Fk7q

Блогер Боря пытается сочетать увлечение астрономией с тягой к путешествиям. Пока пожертвований подписчиков не хватает на билет, он пытается представить, как выглядит звёздное небо в различных точках земного шара. Для этого Боре нужна программа, которая позволяет **составить карту** звёздного неба, **поворачивать** её (с поправкой на долготу) и **отфильтровывать** наименее яркие объекты (с поправкой на световое загрязнение крупных городов).

1) Небесное тело: небесные координаты; видимая звёздная величина.

2) Система: несколько небесных тел, связанных гравитационно.

3) Карта звёздного неба (массив звёзд и других небесных тел): метод, принимающий значение угла и возвращающий копию карты звёздного неба, повёрнутую на заданный угол; метод, принимающий значение звёздной величины и возвращающий копию карты звёздного неба, в которой присутствуют только объекты со звёздной величиной не меньше заданной.
"""

class Stellar_object():

  '''
  Класс имеет четыре поля: высоту (от 0 до 180 градусов, число с плавающей точкой), азимут (от 0 до 360 градусов, число с плавающей точкой),
  звёздную величину (число с плавающей точкой), имя небесного тела
  Единственный метод в классе возвращает информацию об объекте класса
  '''

  def __init__(self, h,  A, m, name):
    self.h = h
    self.A = A
    self.m = m
    self._name = name
    if self.A > 360 or self.h > 180:
       raise Exception("Недопустимое значение параметра!")

  def ret_info(self):
    print(f"Небесное тело {self._name}: высота: {self.h}°, азимут: {self.A}°, звёздная величина: {self.m}")

class Stellar_system(Stellar_object):

# класс системы небесных тел наследуется от класса небесного тела; имеется список, хранящий объекты системы, методы добавления и удаления объектов
# и переопределённый метод, возвращающий информацию об объектах класса

   def __init__(self):
    self.consts = []

   def add_object(self, obj:Stellar_object):
        if obj not in self.consts:
          self.consts.append(obj)

   def delete_object(self, obj:Stellar_object):
      if obj in self.consts:
          self.consts.remove(obj)

   def ret_info(self):
      for telo in self.consts:
        print(f"Небесное тело {telo._name}: высота: {telo.h}°, азимут: {telo.A}°, звёздная величина: {telo.m}")

class Skymap(Stellar_system, Stellar_object):

  '''
  Звездная карта хранит небесные тела и системы небесных тел (поле everything), содержит переопределённые методы добавления и удаления объектов,
  возвращения сведений о теле / системе тел. Кроме того, метод magnitude принимает число -- звёздную величину и стирает с карты все объекты,
  меньшие по звёздной величине.
  Метод turn поворачивает все объекты в карте на заданный угол с учётом границ видимости объекта.
  '''

  def __init__(self):
    self.everything = []

  def add_object(self, obj):
    if type(obj) is Stellar_object:
      self.everything.append(obj)
    if type(obj) is Stellar_system:
      for exemp in obj.consts:
        self.everything.append(exemp)

  def delete_object(self, obj):
    if type(obj) is Stellar_object:
      self.everything.remove(obj)
    if type(obj) is Stellar_system:
      for exemp in obj.consts:
        self.everything.remove(exemp)

  def ret_info(self):
      for telo in self.everything:
        print(f"Небесное тело {telo._name}: высота: {telo.h}°, азимут: {telo.A}°, звёздная величина: {telo.m}")

  def magnitude(obj, num:float):
    for telo in obj.everything:
      if telo.m < num:
        obj.delete_object(telo)
    obj.ret_info()

  def turn(obj, angle:float) -> float:
    for telo in obj.everything:
      telo.h += angle
      telo.A += angle
      if telo.A > 360 or telo.h > 180:
        obj.delete_object(telo)
    obj.ret_info()

"""Тестирование:

(1)
"""

Venus = Stellar_object(55.086, 1000.899, -4.67, "Venus")

"""(2)"""

Venus = Stellar_object(55.086, 142.899, -4.67, "Venus")
Mars = Stellar_object(42.244, 134.223, -2.91, "Mars")
z1 = Stellar_object(40.135, 120.567, -3.0, "z1")
z2 = Stellar_object(41.140 ,110.5, -5.0, 'z2')

a = Stellar_system()
a.add_object(Mars)
a.add_object(z1)
a.add_object(z2)

a.ret_info()

a.delete_object(z2)
print("\n" )
a.ret_info()

"""(3)"""

map = Skymap()
map.add_object(Venus)
map.add_object(a)
map.ret_info()

print('\n')
map.turn(80)

print('\n')
map.turn(100)

map.turn(100)

"""(4)"""

Saturn = Stellar_object(35.997, 263.470, -0.24, "Saturn")
map.add_object(Venus)
map.add_object(a)
map.add_object(z2)
map.add_object(Saturn)
map.ret_info()

map.magnitude(-3.0)

map.magnitude(-20.0)

map.magnitude(100.00)